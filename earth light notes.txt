$d24d - d384: decompress
to: 7f0006
X offset (decomp)
Y offset (comp)

($00cfde: load datasets: aef5+set_offset -> comp type (right nibble), aef8 -> length, aefc-aefe -> source address)
$fd7: set id (set_offset=set_id*0xA)
$fd9 (loaded with constant before call): ???
$fda (left nibble of datatype): ???
$fdb: datatype: #00: uncompressed(d25c), #01: rle-interleaved(d280), #02:copy with fill in(d2eb), #03:rle-interleaved with fill in(d31a)
$fdc: (comp) length
9c55: fill in some  bytes? kanji?

$21/$22: current control bytes
$23/$24: cache for previous values?
$25: counter current set of 8 doublebytes
$37: ram position / bytes written
$39: 16 byte chunks decomp left
$8a-8c: memory bank for (comp)


decomp:
cache=#00
control byte shift left
    bit was 1: load next comp byte
	bit was 0: load #00
xor with cache -> new cache
write to decomp
repeat x8
------------------------
$d385: decompress tilemaps
$fdb datatype #00 (uncompressed): 00 00 -> 80 00 (adding $25=0x80 to 1st byte)
$ab: ram position/bytes written
-------------------
script encoding:
1 control byte, 8 character bytes
each bit in control byte determines whether corresponding character is shifted
-------------------

cd5cc -> 7f0008 :  latin font (57 katakana)

99f2
d385: draw kanji? prerendered 1a807a?

intro: 19fb50 "2"
^addr: $8a+$0fe2
99ce: table?
cfde: select kanji origin
^aefe: table for kanji locations?

$7ba character count? (checked 98db)

$805: frame counter
$806: frame flag
$757: message index
$758: ?
$75b: offset char
$75c: offset line
759: current letter to render
7f9: msg number in seq
77c+(num) : vram target hibyte
75d+(num) : vram target lobyte


7fe-7ff: target vram address (origin)
800-801: target vram (current)
7f9?
$802?

-> jsl $009896 -> 99af
(98e8) unit speciality -> 99af
(da21) intro
-> exit e542 ->

use:
08-0a,2d-2f table addresses, translate to new bank
29-2a origin address
21(-24?): target vram address
2e letter count?
$56: activate BG (at 089938 -> 08993b) 18a4,x

9d vram to write, left in chunk
a9 vram written?
ab vram total to write?

fd7-fd9: starting vram address
fd7-fe0
-24 counters?
ff0-fff: free?y

79b?
7ba
11e4
13a4

7400 e800
7480 e900
7690 ed20
76f0 ede0
7900 f200

4000 8000 0 "MAP"
4030 8060 4 "0"
4040 8080 5 "1"
     
70D0 e1a0
7250 e4a0

17 tiles / 11 chars
5eccd: load constant?
8b3fb: "
----------------------------
unit names
 00dfd3: read 118f3, read 01ee66 (char code + 0xC)

19bd: unit list in ram
1d5a8: calc index for unit name

'A'=0x81
01dd66 tilemaps for units in dock

0d8aca tilempas unit info

1e21,1e23,1e25: header for ram buffer entry
dma request: 7f0000 header: 10 00 si ze vr ad(2116)
inc $ab: add value -> $1e1b, flag -> $1e1d=1, jsl $00e1c2 to perform add

04f0d8: -> RAPID : 12000100100009000400
04f0c0: -> MELEE : 0d0005000c0005000500
04f0cc: -> PIERC : 2b002c002d002e002f00
04f0b4: -> BOMB  : 02000f000d0002000000

1de06: squad count : 130011000000

$2116 0a62->0a61 04dbf4

dock screen tilemap: data id 75
02a8ca: weapopn names dock screen

crab unit list:
00df24 pt load, 01947e

command menu tile maps:
$01d8ea-1d9c9: select command

(hook)
rapid (1): 0f: 1daba  -> 6b016c016d016e01
bomb (2): 07: 1da42 -> 6f01700171017201
shift (2): 06: 1da32 -> 7301740175017601
 
$01d9ca: tilemaps (length 0x10)

main menu:
0ddee9: first letter, id 97, start 0ddc96, len 700

4D018: empty string, long enough?
4d2da lda 16

intro map sprite table: f13f
asgardh: f16b -> ram df0 -> FE or

erebos: $79425 -> E9 F8 04